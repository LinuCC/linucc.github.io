{"componentChunkName":"component---src-templates-blog-post-js","path":"/doctrine-3way-many-to-many/","result":{"data":{"site":{"siteMetadata":{"title":"LinuCC's Blog"}},"markdownRemark":{"id":"fc164563-703b-5f79-920a-954fb41f1126","excerpt":"There seems to be a bug with doctrine 2 when using a table looking like this: a_id b_id c_id 1 1 1 2 2 2 3 3 3 Here we have three foreign keys to other tablesâ€¦","html":"<p>There seems to be a bug with doctrine 2 when using a table looking like this:</p>\n<table>\n<thead>\n<tr>\n<th>a_id</th>\n<th>b_id</th>\n<th>c_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>Here we have three foreign keys to other tables.\nTogether they are also the primary key of the table.</p>\n<p>Now lets say we want to fetch all entries joined with the entries of table <code class=\"language-text\">C</code> using DQL:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">_em</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span>\n  <span class=\"token single-quoted-string string\">'SELECT connector, c\n  FROM Connector connector\n  INNER JOIN connector.c c\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I would expect something like this result with <code class=\"language-text\">Query::HYDRATE_ARRAY</code>:</p>\n<table>\n<thead>\n<tr>\n<th>connector.a_id</th>\n<th>connector.b_id</th>\n<th>connector.c_id</th>\n<th>c.id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>Instead, I get this:</p>\n<table>\n<thead>\n<tr>\n<th>connector.a_id</th>\n<th>connector.b_id</th>\n<th>connector.c_id</th>\n<th>c.id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p>The data of table <code class=\"language-text\">C</code> are all displaced by 1 row, with the last row not having any data.\nThis also applies to the object hydration.</p>\n<p>It seems to be a problem related to the composite primary key.\nLuckily I have access to the database itself, so I could circumvent the problem by adding an additional <code class=\"language-text\">id</code>-column to the table, and making that one the primary key.</p>","frontmatter":{"title":"Doctrine2 three-way many-to-many table result offset","date":"March 28, 2015","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/doctrine-3way-many-to-many/","previous":{"fields":{"slug":"/docker-arch-rpi2/"},"frontmatter":{"title":"Docker with Arch Linux and Raspberry Pi 2"}},"next":null}}}